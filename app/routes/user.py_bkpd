from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app.schemas.user import UserCreate
from app.crud import user as crud_user
from app.db.database import SessionLocal
from app.models.user import User
from pydantic import BaseModel
from typing import List
from app.auth import get_current_user


router = APIRouter()

# Dependency for DB session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@router.post("/signup")
def signup(user: UserCreate, db: Session = Depends(get_db)):
    if crud_user.get_user_by_email(db, user.email):
        raise HTTPException(status_code=400, detail="Email already registered")
    if crud_user.get_user_by_username(db, user.username):
        raise HTTPException(status_code=400, detail="Username already taken")

    new_user = crud_user.create_user(db, user)
    return {"message": "User created", "user_id": new_user.id}

from app.schemas.user import LoginRequest
from app.utils.auth import verify_password, create_access_token

@router.post("/login")
def login(login_req: LoginRequest, db: Session = Depends(get_db)):
    user = crud_user.get_user_by_email(db, login_req.email)
    if not user or not verify_password(login_req.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="Invalid email or password")

    token = create_access_token({"sub": user.email})
    return {
        "access_token": token,
        "token_type": "bearer",
        "user_id": user.id,
        "username": user.username
    }
from fastapi import Depends
from app.utils.auth import get_current_user  # weâ€™ll define this next

@router.get("/me")
def get_profile(current_user: User = Depends(get_current_user)):
    return {
        "first_name": current_user.first_name,
        "last_name": current_user.last_name,
        "email": current_user.email,
        "dob": current_user.dob,
        "pincode": current_user.pincode,
        "username": current_user.username
    }


class OnboardingUpdate(BaseModel):
    hasCompletedOnboarding: bool
    genres: List[str]
    languages: List[str]
    preferred: str

@router.put("/users/onboarding-complete")
def complete_onboarding(
    update: OnboardingUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    user = db.query(User).filter(User.id == current_user.id).first()
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    user.hasCompletedOnboarding = update.hasCompletedOnboarding
    user.genres = update.genres
    user.languages = update.languages
    user.preferred = update.preferred
    db.commit()
    db.refresh(user)

    return {
        "message": "Onboarding completed",
        "user": {
            "id": user.id,
            "genres": user.genres,
            "languages": user.languages,
            "preferred": user.preferred,
            "hasCompletedOnboarding": user.hasCompletedOnboarding
        }
    }
